<?php
/**
 * Phanbook : Delightfully simple forum software
 *
 * Licensed under The GNU License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @link    http://phanbook.com Phanbook Project
 * @since   1.0.0
 * @license http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
namespace Phanbook\Frontend\Controllers;

use Phanbook\Frontend\Forms\ChannelsForm;
use Phanbook\Models\Channels;

class ChannelsController extends ControllerBase
{
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->view->isGoto = false;
    }

    public function indexAction()
    {
        $this->setPerPage(28);

        $sql = ['model' => 'Channels', 'joins' => []];
        $channels = $this->paginator($sql);
        $pagination = $channels->getPaginate();
        $this->view->setVars([
            'channels' => $pagination->items,
            'currentPage' => $pagination->current,
            'totalPages' => $pagination->total_page,
        ]);
    }

    public function newAction()
    {

        $this->view->form = new ChannelsForm;
        $this->view->pick($this->router->getControllerName() . '/item');
    }

    public function editAction($id)
    {

        $param = $this->dispatcher->getParams();

        if (!isset($id)) {
            $id = $param[0];
        }
        if (!$channels = Channels::findByIdOrUid($id)) {
            $this->flashSession->error(t('Channels doesn\'t exist.'));
            return $this->currentRedirect();
        }
        if (!$this->authorize($channels)) {
            $this->flashSession->error(AUTHORIZE_FALSE);
            return $this->currentRedirect();
        }

        $form   = new ChannelsForm($channels);
        if (isset($param[1])) {
            $form->bind(unserialize($param[1]), $channels);
        }
        $this->view->form = $form;
        $this->view->object = $channels;
        $this->view->pick($this->router->getControllerName() . '/item');
    }
    public function saveAction()
    {
        if (!$this->request->isPost()) {
            return $this->response->redirect($this->router->getControllerName());
        }

        $id = $this->request->getPost('id');
        if (!is_null($id)) {
            $channels = Channels::findFirstById($id);
        }
        //Default channel had created when add new user so check
        if (!$channels) {
            $this->flashSession->error(t('Channels doesn\'t exist.'));
            return $this->response->redirect($this->router->getControllerName());
        }
        if (!$this->authorize($channels)) {
            $this->flashSession->error(t('You do not have permission edit this page'));
            return $this->currentRedirect();
        }

        $form = new ChannelsForm($channels);
        $form->bind($_POST, $channels);

        if (!$form->isValid()) {
            foreach ($form->getMessages() as $m) {
                $this->flashSession->error($m->getMessage());
            }
            return $this->redirectKeepValue($id);

        }
        if ($this->request->hasFiles()) {
            foreach ($this->request->getUploadedFiles() as $file) {
                if ($this->imageCheck($file->getRealType())) {
                    $uniqid = uniqid(true) . '.png';
                    //Move to temp location
                    $r = $file->moveTo(public_path('uploads/channels/' . $uniqid));
                    $channels->imageFilename = $uniqid;
                    //Put to jobs
                    //$this->queue->put(['channels' => ['id' => $uniqid]]);
                    $this->queue->enqueue('upload_images', "Phanbook\\Queue\\UploadImage", ['id' => $uniqid], true);

                }
            }
        }
        if (!$channels->save()) {
            foreach ($channels->getMessages() as $m) {
                $this->flashSession->error($m->getMessage());
            }
            return $this->redirectKeepValue($id);
        }
        $this->flashSession->success(t('Channel is updated successfully'));
        return $this->currentRedirect();
    }
    public function viewAction($slug)
    {
        if (!$channels = Channels::findFirstBySlug($slug)) {
            $this->flashSession->error(t('Channels doesn\'t exist.'));
            return $this->currentRedirect();
        }
        $this->setPerPage(16);
        $paginate = $channels->getPaginateVideo($this->getPerPageAndOffset());
        $this->view->setVars([
            'channel' => $channels,
            'channelsUser' => $channels->user,
            'videos' => $paginate->items,
            'totalPages' => $paginate->total_pages,
            'currentPage' => $paginate->current,
            'class' => 'channel'
        ]);
    }
}
